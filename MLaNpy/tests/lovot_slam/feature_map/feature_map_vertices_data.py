import pathlib
import shutil
from typing import Dict

import numpy as np
import yaml

TEST_DATASET_PATH = pathlib.Path('/tmp/lovot-localization-test')
MAPS_ROOT_PATH = TEST_DATASET_PATH / 'maps'

VERTICES_COLUMNS = 18
VERTICES_HEADER = ', '.join([
    'vertex index', 'timestamp [ns]',
    'position x [m]', 'position y [m]', 'position z [m]',
    'quaternion x', 'quaternion y', 'quaternion z', 'quaternion w',
    'velocity x [m/s]', 'velocity y [m/s]', 'velocity z [m/s]',
    'acc bias x [m/s^2]', 'acc bias y [m/s^2]', 'acc bias z [m/s^2]',
    'gyro bias x [rad/s]', 'gyro bias y [rad/s]', 'gyro bias z [rad/s]'
])
VERTICES_FORMAT = ', '.join(['%i', '%i'] + ['%.7f'] * 16)
# dictionary of maps.
# each map has some mission(s) and share at least one of the missions with another map.
MAPS_VERTICES = {
    'map_a': {
        '28e237ce950ed6150e00000000000000': np.array([
            [0, 1560000001000000000,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [1, 1560000002000000000,
             0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2, 1560000003000000000,
             1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [3, 1560000004000000000,
             1.0, 0.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [4, 1560000005000000000,
             1.0, 0.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ])
    },
    # map origin is shifted by (1.0, 2.0) and then rotated by +90 deg.
    'map_b': {
        '28e237ce950ed6150e00000000000000': np.array([
            [0, 1560000001000000000,
             1.0, 2.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [1, 1560000002000000000,
             1.0, 2.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2, 1560000003000000000,
             1.0, 3.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [3, 1560000004000000000,
             0.5, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [4, 1560000005000000000,
             0.0, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ]),
        '35db4906360cd6150e00000000000000': np.array([
            [5, 1560000011000000000,
             11.0, 2.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [6, 1560000012000000000,
             11.0, 2.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [7, 1560000013000000000,
             11.0, 3.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [8, 1560000014000000000,
             10.5, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [9, 1560000015000000000,
             10.0, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ])
    },
    # map origin is the same as map_a
    'map_c': {
        '28e237ce950ed6150e00000000000000': np.array([
            [0, 1560000001000000000,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [1, 1560000002000000000,
             0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [2, 1560000003000000000,
             1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [3, 1560000004000000000,
             1.0, 0.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [4, 1560000005000000000,
             1.0, 0.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ]),
        '35db4906360cd6150e00000000000000': np.array([
            [5, 1560000011000000000,
             0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [6, 1560000012000000000,
             0.5, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [7, 1560000013000000000,
             1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [8, 1560000014000000000,
             1.0, 10.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [9, 1560000015000000000,
             1.0, 10.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ]),
        '5097404d4d0dd6150e00000000000000': np.array([
            [10, 1560000021000000000,
             10.0, 10.0, 1.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [11, 1560000022000000000,
             10.5, 10.0, 2.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [12, 1560000023000000000,
             11.0, 10.0, 3.0, 0.0, 0.0, 0.0, 1.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [13, 1560000024000000000,
             11.0, 10.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [14, 1560000025000000000,
             11.0, 10.5, 0.0, 0.0, 0.0, 0.7071068, 0.7071068,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        ])
    },
    # to test filter. all missions have the same trajectories.
    'map_d': {
        '01': np.linspace(  # (0, 0) -> (1, 0) line
            [0, 1560000000000000000, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [100, 1560000010000000000, 10.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '02': np.linspace(  # (0, 0) -> (1, 0) line
            [101, 1560000010000000000, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [201, 1560000020000000000, 10.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '03': np.linspace(  # (0, 0) -> (1, 0) line
            [202, 1560000020000000000, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [302, 1560000030000000000, 10.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
    },
    # to test filter. all missions have the different trajectories.
    'map_e': {
        '01': np.linspace(  # (0, 0) -> (1, 0) line
            [0, 1560000000000000000, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [100, 1560000010000000000, 10.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '02': np.linspace(  # (0, 0) -> (1, 0) line
            [101, 1560000010000000000, 0.0, 10.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [201, 1560000020000000000, 10.0, 10.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '03': np.linspace(  # (0, 0) -> (1, 0) line
            [202, 1560000020000000000, 0.0, 20.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [302, 1560000030000000000, 10.0, 20.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
    },
    # to test mission count filter. mission 02 has biggest covarage.
    'map_f': {
        '01': np.linspace(  # (0, 0) -> (1, 0) line
            [0, 1560000000000000000, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [100, 1560000010000000000, 10.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '02': np.linspace(  # (0, 0) -> (1, 0) line
            [101, 1560000010000000000, 0.0, 10.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [301, 1560000020000000000, 20.0, 10.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
        '03': np.linspace(  # (0, 0) -> (1, 0) line
            [302, 1560000020000000000, 0.0, 20.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            [452, 1560000030000000000, 15.0, 20.0, 0.0,
             0.0, 0.0, 0.0, 1.0] + [0.0] * 9,
            101),
    },
}


def create_vertices_csv_files(map_path: pathlib.Path, missions: Dict[str, np.ndarray]):
    vertices_path = map_path / 'feature_map' / 'vertices'
    for mission, vertices_arr in missions.items():
        mission_vertices_dir = vertices_path / mission
        mission_vertices_dir.mkdir(parents=True, exist_ok=True)
        if vertices_arr.shape[1] != VERTICES_COLUMNS:
            arr = np.zeros((vertices_arr.shape[0], VERTICES_COLUMNS))
            arr[:, :vertices_arr.shape[1]] = vertices_arr
            vertices_arr = arr
        np.savetxt(mission_vertices_dir / 'vertices.csv',
                   vertices_arr,
                   fmt=VERTICES_FORMAT,
                   header=VERTICES_HEADER,
                   comments='')


def setup_dataset():
    MAPS_ROOT_PATH.mkdir(parents=True, exist_ok=True)

    for map_name, missions in MAPS_VERTICES.items():
        map_path = MAPS_ROOT_PATH / map_name
        # save mission ids as yaml
        vi_map_path = map_path / 'feature_map' / 'vi_map'
        vi_map_path.mkdir(parents=True, exist_ok=True)
        with open(vi_map_path / 'missions.yaml', 'w') as f:
            yaml.safe_dump({'mission_ids': list(missions.keys())}, f)
        # save vertices as csv
        create_vertices_csv_files(map_path, missions)


def teardown_dataset():
    shutil.rmtree(TEST_DATASET_PATH)
