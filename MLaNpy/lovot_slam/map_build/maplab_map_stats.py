"""
Module for parsing maplab map statistics YAML files.

This module provides classes to parse YAML statistics files generated by maplab_console
and extract mission-related metrics in a structured way.
"""

from logging import getLogger
from pathlib import Path
from typing import Dict, Optional

import yaml
from attrs import define

_logger = getLogger(__name__)


@define(frozen=True)
class MissionMetrics:
    """Mission-related metrics extracted from maplab statistics.

    This class stores metrics for individual missions. Currently contains only
    landmark count, but can be extended with additional metrics in the future.
    """
    landmark_count: int


class MaplabMapStatsParser:
    """Parser for maplab map statistics YAML files.

    This class parses YAML files generated by maplab_console's export_map_stats_yaml
    command and extracts mission-related metrics into structured data.
    """

    def __init__(self, yaml_file_path: Path):
        """Initialize parser with path to YAML statistics file.

        Args:
            yaml_file_path: Path to the map statistics YAML file
        """
        self._yaml_file_path = yaml_file_path
        self._stats_data: Optional[dict] = None
        self._load_yaml()

    def _load_yaml(self) -> None:
        """Load and parse the YAML file."""
        if not self._yaml_file_path.exists():
            _logger.warning(f"Map statistics YAML not found: {self._yaml_file_path}")
            return

        try:
            with open(self._yaml_file_path, 'r') as f:
                self._stats_data = yaml.safe_load(f)
        except (yaml.YAMLError, OSError) as e:
            _logger.error(f"Failed to load YAML from {self._yaml_file_path}: {e}")
            self._stats_data = None

    @property
    def accumulated_metrics(self) -> Optional[MissionMetrics]:
        """Get accumulated metrics across all missions.

        Returns:
            MissionMetrics instance with accumulated data, or None if not available
        """
        if not self._stats_data:
            return None

        accumulated_stats = self._stats_data.get('accumulated_stats', {})
        total_landmarks = accumulated_stats.get('total_landmarks', {})
        landmark_count = total_landmarks.get('total')

        if landmark_count is not None:
            return MissionMetrics(landmark_count=landmark_count)

        return None

    @property
    def mission_metrics(self) -> Dict[str, MissionMetrics]:
        """Get per-mission metrics.

        Returns:
            Dictionary mapping mission_id to MissionMetrics instances
        """
        if not self._stats_data:
            return {}

        missions = self._stats_data.get('missions', [])
        mission_metrics = {}

        for mission in missions:
            mission_id = mission.get('mission_id')
            if not mission_id:
                continue

            mission_stats = mission.get('statistics', {})
            landmarks = mission_stats.get('landmarks', {})
            landmark_count = landmarks.get('total')

            if landmark_count is not None:
                mission_metrics[mission_id] = MissionMetrics(landmark_count=landmark_count)

        return mission_metrics
